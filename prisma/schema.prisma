// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  name               String?
  userType           UserType @default(PRIVATE)

  // Company-specific billing info
  companyName        String?
  vatNumber          String? // Partita IVA
  billingAddress     String? // Indirizzo di fatturazione
  sdiCode            String? // Codice Destinatario SDI
  email              String   @unique
  password           String
  role               Role     @default(CLIENT)
  isBlocked          Boolean  @default(false)
  llmProvider        String?
  customInstructions String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  stripeCustomerId String? @unique // ID Cliente Stripe (cus_xxxx)

  conversations Conversation[]
  subscription  Subscription?
  tokenUsage    TokenUsage[]

  workflow   Workflow? @relation(fields: [workflowId], references: [id])
  workflowId String?

  workflowExecutionLogs WorkflowExecutionLog[]
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  userId      String? // Se null, è un template globale. Se valorizzato, è una copia per un utente specifico.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  nodes WorkflowNode[]
  edges WorkflowEdge[]
  users User[]
}

model WorkflowNode {
  id         String @id @default(cuid())
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  nodeId   String // ID univoco del nodo nel canvas (per React Flow)
  type     String // es. 'llm', 'input', 'output'
  position Json   // { x: number, y: number }
  data     Json   // Dati specifici del nodo (provider, prompt, temperatura, ecc.)

  @@unique([workflowId, nodeId])
}

model WorkflowEdge {
  id         String @id @default(cuid())
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  edgeId     String // ID univoco dell'edge nel canvas (per React Flow)
  sourceId   String // nodeId di origine
  targetId   String // nodeId di destinazione
  data       Json?  // Dati specifici dell'edge (es. istruzioni di transizione)

  @@unique([workflowId, edgeId])
}

model LLMProvider {
  id       String  @id @default(cuid())
  name     String  @unique
  apiKey   String
  isActive Boolean @default(true)
  config   Json?
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  // Traccia quale workflow è stato usato per questa conversazione
  workflowId String?
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String      @db.Text
  tokensIn       Int?
  tokensOut      Int?
  llmProvider    String?
  attachments    Json?
  createdAt      DateTime    @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeSubscriptionId String? @unique // ID Abbonamento Stripe (sub_xxxx) - RESO OPZIONALE TEMPORANEAMENTE
  stripePriceId        String? // ID Prezzo Stripe (price_xxxx) - identifica il piano e la frequenza
  stripeProductId      String? // ID Prodotto Stripe (prod_xxxx) - identifica il prodotto (Light, Medium, Advanced)

  status String // Es: active, past_due, canceled, trialing (direttamente da Stripe)
  tokenLimit Int    @default(10000) // Limite di token giornaliero

  currentPeriodStart DateTime? // Inizio periodo corrente - RESO OPZIONALE
  currentPeriodEnd   DateTime? // Fine periodo corrente (quando si rinnova/scade) - RESO OPZIONALE

  cancelAtPeriodEnd Boolean? // Se cancellato alla fine del periodo
  canceledAt        DateTime? // Data di cancellazione effettiva
  endedAt           DateTime? // Data di termine definitivo

  trialStart DateTime? // Inizio periodo di prova
  trialEnd   DateTime? // Fine periodo di prova

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TokenUsage {
  id         String   @id @default(cuid())
  userId     String
  tokensUsed Int
  cost       Float?
  date       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CLIENT
}

enum MessageRole {
  USER
  ASSISTANT
}

enum UserType {
  PRIVATE
  COMPANY
}

model Plan {
  id            String   @id @default(cuid())
    name          String   @unique // e.g., "Light", "Medium", "Advanced"
  price         Float    // The monthly price of the plan
  description   String?
  features      String[] // List of features for this plan
  stripePriceId String   @unique // ID del prezzo su Stripe (price_...)
  isActive      Boolean  @default(true) // To easily enable/disable plans
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WorkflowExecutionLog {
  id        String   @id @default(cuid())
  workflowId  String
  userId      String
  success     Boolean
  startedAt   DateTime @default(now())
  endedAt     DateTime @updatedAt
  input       String   @db.Text
  output      String   @db.Text
  error       String?  @db.Text
  steps       Json?    // Dettagli di ogni step (nodi eseguiti)
  totalCost   Float    @default(0)
  totalTokens Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
